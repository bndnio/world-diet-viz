{"version":3,"sources":["DataContext/data-context.js","DataContext/withData.jsx","Visualizations/SimpleViz/SimpleViz.jsx","Components/VisualizationSelector/VisualizationSelector.jsx","Components/VisualizationBase/VisualizationBase.jsx","Components/VisualizationContainer/VisualizationContainer.jsx","App/App.jsx","serviceWorker.js","index.js"],"names":["DataContext","React","setData","allData","Component","settings","width","height","padding","numDataPoints","maxRange","Math","random","Axis","this","renderAxis","node","refs","axisContainer","axis","props","orient","d3","ticks","scale","call","react_default","a","createElement","className","ref","transform","translate","XYAxis","SimpleViz_Axis","concat","xScale","yScale","DataCircles","coords","cx","cy","r","key","data","map","renderCircle","bind","ScatterPlot","xMax","d","domain","range","yMax","getXScale","getYScale","SimpleViz_DataCircles","Object","assign","SimpleViz_XYAxis","SimpleViz","randomizeData","randomData","floor","setState","SimpleViz_ScatterPlot","state","onClick","withData","react","Consumer","dataProps","VisualizationSelector","openKeys","toggleOpen","_this","length","handleClick","e","openVisualization","Visualizations","menu","mode","onOpenChange","SubMenu","title","Item","VisualizationBase","children","Sider","Content","VisualizationContainer","visualizationComponent","layout","style","theme","Components_VisualizationSelector_VisualizationSelector","Components_VisualizationBase_VisualizationBase","App","Components_VisualizationContainer_VisualizationContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b4c49d7.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport const DataContext = React.createContext(\r\n  // default values used by a Consumer when it does not have a\r\n  // matching Provider above it in the tree, useful for testing\r\n  {\r\n    setData: () => {},\r\n    allData: [],\r\n  }\r\n);\r\n","import * as React from 'react';\r\nimport { DataContext } from './data-context';\r\n\r\nexport function withData(Component) {\r\n  return function DataComponent(props) {\r\n    return (\r\n      <DataContext.Consumer>\r\n        {dataProps => <Component {...props} data={dataProps} />}\r\n      </DataContext.Consumer>\r\n    );\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as d3 from 'd3';\r\nimport { withData } from '../../DataContext/withData';\r\n\r\nimport './SimpleViz.css';\r\n\r\nconst settings = {\r\n  width: 500,\r\n  height: 300,\r\n  padding: 30,\r\n  numDataPoints: 50,\r\n  maxRange: () => Math.random() * 1000,\r\n};\r\n\r\nclass Axis extends React.Component {\r\n  static propTypes = {\r\n    translate: PropTypes.string.isRequired,\r\n    orient: PropTypes.oneOf(['bottom', 'left']).isRequired,\r\n    scale: PropTypes.func.isRequired,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.renderAxis();\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.renderAxis();\r\n  }\r\n\r\n  renderAxis() {\r\n    const node = this.refs.axisContainer;\r\n    const baseAxis =\r\n      this.props.orient === 'bottom'\r\n        ? d3.axisBottom()\r\n        : this.props.orient === 'left'\r\n        ? d3.axisLeft()\r\n        : null;\r\n    const axis = baseAxis.ticks(5).scale(this.props.scale);\r\n\r\n    d3.select(node).call(axis);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <g\r\n        className=\"axis\"\r\n        ref=\"axisContainer\"\r\n        transform={this.props.translate}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass XYAxis extends React.Component {\r\n  static propTypes = {\r\n    padding: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    xScale: PropTypes.func.isRequired,\r\n    yScale: PropTypes.func.isRequired,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <g className=\"xy-axis\">\r\n        <Axis\r\n          translate={`translate(0, ${this.props.height - this.props.padding})`}\r\n          scale={this.props.xScale}\r\n          orient=\"bottom\"\r\n        />\r\n        <Axis\r\n          translate={`translate(${this.props.padding}, 0)`}\r\n          scale={this.props.yScale}\r\n          orient=\"left\"\r\n        />\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nclass DataCircles extends React.Component {\r\n  static propTypes = {\r\n    xScale: PropTypes.func.isRequired,\r\n    yScale: PropTypes.func.isRequired,\r\n  };\r\n\r\n  renderCircle(coords) {\r\n    return (\r\n      <circle\r\n        cx={this.props.xScale(coords[0])}\r\n        cy={this.props.yScale(coords[1])}\r\n        r={2}\r\n        key={Math.random() * 1}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return <g>{this.props.data.map(this.renderCircle.bind(this))}</g>;\r\n  }\r\n}\r\n\r\nclass ScatterPlot extends React.Component {\r\n  static propTypes = {\r\n    padding: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    data: PropTypes.array.isRequired,\r\n  };\r\n\r\n  getXScale() {\r\n    const xMax = d3.max(this.props.data, d => d[0]);\r\n\r\n    return d3\r\n      .scaleLinear()\r\n      .domain([0, xMax])\r\n      .range([this.props.padding, this.props.width - this.props.padding * 2]);\r\n  }\r\n\r\n  getYScale() {\r\n    const yMax = d3.max(this.props.data, d => d[1]);\r\n\r\n    return d3\r\n      .scaleLinear()\r\n      .domain([0, yMax])\r\n      .range([this.props.height - this.props.padding, this.props.padding]);\r\n  }\r\n\r\n  render() {\r\n    const xScale = this.getXScale();\r\n    const yScale = this.getYScale();\r\n\r\n    return (\r\n      <svg width={this.props.width} height={this.props.height}>\r\n        <DataCircles xScale={xScale} yScale={yScale} {...this.props} />\r\n        <XYAxis xScale={xScale} yScale={yScale} {...this.props} />\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n\r\nclass SimpleViz extends Component {\r\n  componentWillMount() {\r\n    this.randomizeData();\r\n  }\r\n\r\n  randomizeData() {\r\n    const randomData = d3.range(settings.numDataPoints).map(() => {\r\n      return [\r\n        Math.floor(Math.random() * settings.maxRange()),\r\n        Math.floor(Math.random() * settings.maxRange()),\r\n      ];\r\n    });\r\n    this.setState({ data: randomData });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>React and D3 are Friends</h1>\r\n        <ScatterPlot data={this.state.data} {...settings} />\r\n        <div className=\"controls\">\r\n          <button\r\n            className=\"btn randomize\"\r\n            onClick={this.randomizeData.bind(this)}\r\n          >\r\n            Randomize Data\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSimpleViz.propTypes = {};\r\n\r\nexport default withData(SimpleViz);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './VisualizationSelector.css';\r\nimport { Menu } from 'antd';\r\nimport * as Visualizations from '../../Visualizations';\r\n\r\nclass VisualizationSelector extends Component {\r\n  static propTypes = {\r\n    // Set open visualization in parent component\r\n    openVisualization: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    openKeys: ['visualizations'],\r\n  };\r\n\r\n  toggleOpen = () => {\r\n    this.setState(state => {\r\n      if (state.openKeys.length === 0) {\r\n        return { openKeys: ['visualizations'] };\r\n      } else {\r\n        return { openKeys: [] };\r\n      }\r\n    });\r\n  };\r\n\r\n  handleClick = e => {\r\n    const { key } = e;\r\n    this.props.openVisualization(Visualizations[key] || null);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Menu\r\n        mode=\"inline\"\r\n        openKeys={this.state.openKeys}\r\n        onOpenChange={this.toggleOpen}\r\n        onClick={this.handleClick}\r\n      >\r\n        <Menu.SubMenu key=\"visualizations\" title={<span>Visualization</span>}>\r\n          <Menu.Item key=\"SimpleViz\">SimpleViz</Menu.Item>\r\n          <Menu.Item>Other</Menu.Item>\r\n          <Menu.Item>AndAnother</Menu.Item>\r\n        </Menu.SubMenu>\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VisualizationSelector;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './VisualizationBase.css';\r\n\r\nclass VisualizationBase extends Component {\r\n  static propTypes = {\r\n    children: PropTypes.element,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"VisualizationBase-container\">\r\n        {this.props.children || 'Pick a visualization to get started'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VisualizationBase;\r\n","import React, { Component } from 'react';\r\nimport { Layout } from 'antd';\r\nimport './VisualizationContainer.css';\r\nimport VisualizationSelector from '../VisualizationSelector';\r\nimport VisualizationBase from '../VisualizationBase';\r\n\r\nconst { Sider, Content } = Layout;\r\n\r\nclass VisualizationContainer extends Component {\r\n  state = {\r\n    openVisualization: null,\r\n  };\r\n\r\n  openVisualization = visualizationComponent => {\r\n    this.setState({ openVisualization: visualizationComponent });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Layout style={{ height: '100vh' }}>\r\n        <Sider theme=\"light\">\r\n          <h1 className=\"App-title\">Nutrition InfoViz</h1>\r\n          <VisualizationSelector openVisualization={this.openVisualization} />\r\n        </Sider>\r\n        <Content>\r\n          <VisualizationBase>\r\n            {!!this.state.openVisualization ? (\r\n              <this.state.openVisualization />\r\n            ) : null}\r\n          </VisualizationBase>\r\n        </Content>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\n// Receives no props\r\nVisualizationContainer.propTypes = {};\r\n\r\nexport default VisualizationContainer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport VisualizationContainer from '../Components/VisualizationContainer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <VisualizationContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}